/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Cat Facts API
 * API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ –æ –∫–æ—à–∫–∞—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Fact,
  GetFactsParams,
  PaginatedFacts
} from '../model';

import { customInstance } from '../../../shared/api/axios-instance';




/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
 */
export const getFact = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<Fact>(
      {url: `/fact`, method: 'GET', signal
    },
      );
    }
  

export const getGetFactQueryKey = () => {
    return [`/fact`] as const;
    }

    
export const getGetFactQueryOptions = <TData = Awaited<ReturnType<typeof getFact>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFact>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFactQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFact>>> = ({ signal }) => getFact(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFactQueryResult = NonNullable<Awaited<ReturnType<typeof getFact>>>
export type GetFactQueryError = unknown


export function useGetFact<TData = Awaited<ReturnType<typeof getFact>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFact>>,
          TError,
          Awaited<ReturnType<typeof getFact>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFact<TData = Awaited<ReturnType<typeof getFact>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFact>>,
          TError,
          Awaited<ReturnType<typeof getFact>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFact<TData = Awaited<ReturnType<typeof getFact>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFact>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
 */

export function useGetFact<TData = Awaited<ReturnType<typeof getFact>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFact>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFactQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–∫—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
export const getFacts = (
    params?: GetFactsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedFacts>(
      {url: `/facts`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetFactsQueryKey = (params?: GetFactsParams,) => {
    return [`/facts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFactsQueryOptions = <TData = Awaited<ReturnType<typeof getFacts>>, TError = unknown>(params?: GetFactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFactsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFacts>>> = ({ signal }) => getFacts(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFactsQueryResult = NonNullable<Awaited<ReturnType<typeof getFacts>>>
export type GetFactsQueryError = unknown


export function useGetFacts<TData = Awaited<ReturnType<typeof getFacts>>, TError = unknown>(
 params: undefined |  GetFactsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFacts>>,
          TError,
          Awaited<ReturnType<typeof getFacts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFacts<TData = Awaited<ReturnType<typeof getFacts>>, TError = unknown>(
 params?: GetFactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFacts>>,
          TError,
          Awaited<ReturnType<typeof getFacts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFacts<TData = Awaited<ReturnType<typeof getFacts>>, TError = unknown>(
 params?: GetFactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–∫—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */

export function useGetFacts<TData = Awaited<ReturnType<typeof getFacts>>, TError = unknown>(
 params?: GetFactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFactsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




